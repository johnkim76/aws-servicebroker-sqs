---
- pause:
    seconds: 2

- name: include plan vars
  include_vars:
    file: "sqs-fifo.yml"

- asb_last_operation:
    description: "Finished setting vars for provision"

- block:
    - name: CloudFormation - SQS FIFO Queue - {{ apb_action }}
      cloudformation:
        stack_name: "apb-sqs-{{ stack_suffix }}"
        state: "{{ state }}"
        region: "{{ region }}"
        disable_rollback: false
        template: "{{ role_path }}/files/SQSFIFOQueue.yml"
        template_parameters:
          ContentBasedDeduplication: "{{ ContentBasedDeduplication }}"
          QueueName: "{{ QueueName }}"
          DelaySeconds: "{{ DelaySeconds | string }}"
          MaximumMessageSize: "{{ MaximumMessageSize | string }}"
          MessageRetentionPeriod: "{{ MessageRetentionPeriod | string }}"
          ReceiveMessageWaitTimeSeconds: "{{ ReceiveMessageWaitTimeSeconds }}"
          UsedeadletterQueue: "{{ UsedeadletterQueue }}"
          VisibilityTimeout: "{{ VisibilityTimeout | string }}"
        tags:
          ServiceBrokerId: "{{ application_name }}"
      register: sqs
  rescue:
    - debug: var=ansible_failed_result.msg
    - debug: var=sqs.log
    - set_fact:
        termination_msg: "{{ ansible_failed_result.msg }}"
      when: ansible_failed_result.msg is defined
    - set_fact:
        termination_msg: "{{ sqs.log | to_yaml }}"
      when: sqs.log is defined

    ####################################
    # Custom Error Message
    ####################################
    - name: Writting Termination Message '{{ terminationMessagePathFile }}'
      shell: echo "[CloudFormation Error] - {{ termination_msg }}" > {{ terminationMessagePathFile }}

    - fail: msg="[APB Failed Plan - '{{ _apb_plan_id }}'] "

- asb_last_operation:
    description: "Completed CloudFormation Template for SQS - FIFO"

- name: Recording SQS FIFO queue output facts
  set_fact:
    sqs_queue_arn:  "{{ sqs.stack_outputs.QueueARN }}"
    sqs_queue_name: "{{ sqs.stack_outputs.QueueName }}"
    sqs_queue_url:  "{{ sqs.stack_outputs.QueueURL }}"
  when: sqs.stack_outputs is defined

- include: iam.yml

- name: Encode bind credentials
  asb_encode_binding:
    fields:
      SQS_QUEUE_ARN:             "{{ sqs_queue_arn }}"
      SQS_QUEUE_NAME:            "{{ sqs_queue_name }}"
      SQS_QUEUE_URL:             "{{ sqs_queue_url }}"
      SQS_AWS_ACCESS_KEY_ID:     "{{ iam_output.user_meta.access_keys[0].access_key_id }}"
      SQS_AWS_SECRET_ACCESS_KEY: "{{ iam_output.user_meta.access_keys[0].secret_access_key }}"
      SQS_REGION:                "{{ region }}"
  when: (state == 'present') and (iam_output.user_meta is defined)
